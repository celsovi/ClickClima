services:
  db:
    container_name: clickclima-db
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    pull_policy: always
  api:
    container_name: clickclima-api
    image: registry.simple4decision.com/clickclima-api:latest
    command: >
      sh -c "
        # Espera pelo Postgres estar pronto
        until pg_isready -h db -p 5432 -U $$POSTGRES_USER -d $$POSTGRES_DB; do
          echo 'Waiting for PostgreSQL to be ready...'
          sleep 2
        done
        echo 'PostgreSQL is up and running. Applying migrations...'
        python /app/manage.py migrate && gunicorn core.wsgi:application --bind 0.0.0.0:8000"
    depends_on:
      - db
    env_file:
      - .env
    restart: unless-stopped
    pull_policy: always

volumes:
  postgres_data:

networks:
  default:
    external: true
    name: proxy-network
